# fs模块

Node.js中的"fs"代表文件系统（File System）模块，它是Node.js的核心模块之一，用于处理文件和目录的操作。这个模块提供了许多功能，包括读取文件、写入文件、创建目录、删除文件、检查文件和目录的状态等。

使用前选导入 `fs`

```javascript
const fs = require('fs')
```

以下是一些常见的`fs`模块方法和操作：

## 注意：

### 问题

fs的诸多方法需要传入文件路径，而在node的环境中：

除了require()方法导入时传递的路径是相对于当前所在文件的路径。

其他情况传入的相对路径，是相对于启动文件时控制台命令行所在路径。

这样在使用时就产生了需要担心控制台命令行的路径是否正确的问题

### 解决办法

因为上面的问题存在，所以在使用fs提供的方法传入路径参数时，不会使用相对路径。

而会借用 `node`的 `path` 模块中的 `resolve`方法来将相对路径转换为绝对路径。

例如相对路径 `./test.js`

可以经过如下转换：

```javascript
const path = require('path');
const filepath = path.resolve(__dirname,'./test.js');
```

这代码段使用Node.js的`path`模块来创建一个绝对文件路径。

`const filepath = path.resolve(__dirname, './test.js');`：这行代码使用`path.resolve()`方法来创建一个绝对文件路径，并将结果存储在`filepath`变量中。

- `__dirname`：这是Node.js中的一个特殊变量，它表示当前执行脚本的目录的路径。它的值是一个字符串，包含了当前脚本所在的目录的绝对路径。

- `'./test.js'`：这是相对于`__dirname`的相对路径。在这个例子中，我们将创建一个指向`test.js`文件的绝对路径。`'./test.js'`表示当前目录下的`test.js`文件。

- `path.resolve()`方法接受多个参数，它们会被连接在一起以生成一个规范化的绝对路径。在这种情况下，`__dirname`和`'./test.js'`会被连接在一起，以创建一个指向`test.js`文件的绝对路径。

最终，`filepath`变量将包含一个绝对路径，指向当前脚本所在目录下的`test.js`文件。这个路径可以用于读取或操作`test.js`文件，而不用担心相对路径的问题。

## 读取文件：

- `fs.readFile()`: 用于异步地读取文件内容。
- `fs.readFileSync()`: 用于同步地读取文件内容。

`fs.readFile()` 是 Node.js 文件系统模块中的方法，它用于异步读取文件的内容。该方法需要传入以下参数：

1. 文件路径（`path`）：您需要指定要读取的文件的路径，可以是相对路径或绝对路径。这是 `fs.readFile()` 方法的第一个参数。

2. 编码选项（可选）：您可以指定文件的编码选项，以便将文件内容解释为文本。如果不提供编码选项，`fs.readFile()` 将返回原始的缓冲区对象。常见的编码选项包括：
   - `'utf8'`：以 UTF-8 编码读取文件，返回文本内容。
   - `'ascii'`：以 ASCII 编码读取文件。
   - `'binary'`：以二进制模式读取文件。

3. 回调函数：`fs.readFile()` 是异步方法，因此它需要一个回调函数，用于在文件读取完成后执行。该回调函数接受两参数：
   - `err`：如果在读取文件时发生错误，`err` 参数将包含错误信息，否则为 `null`。
   - `data`：如果成功读取文件，`data` 参数将包含文件的内容。

下面是一个示例，展示了如何调用 `fs.readFile()` 并传入这些参数：

```javascript
const fs = require('fs');

const filePath = 'example.txt'; // 文件路径
const encoding = 'utf8'; // 编码选项

fs.readFile(filePath, encoding, (err, data) => {
    if (err) {
        console.error('读取文件时发生错误:', err);
    } else {
        console.log('文件内容:', data);
    }
});
```

这个示例中，我们指定了文件路径、编码选项（UTF-8），并提供了一个回调函数来处理文件读取的结果。如果读取成功，文件内容将在 `data` 参数中返回。

补充：

当没有传入编码方式时，返回的 `data` 是一个数字编码的数组。可以通过 `data.toString('utf-8')`方式将其转换为可阅读的编码方式（这里以 `utf-8`为例）。

## 写入文件：

- `fs.writeFile()`: 用于异步地写入文件内容。
- `fs.writeFileSync()`: 用于同步地写入文件内容。

`fs.writeFile()` 是 Node.js 文件系统模块中的方法，用于异步地写入文件的内容。这个方法需要传入以下参数：

1. 文件路径 (`file`)：您需要指定要写入的文件的路径，可以是相对路径或绝对路径。这是 `fs.writeFile()` 方法的第一个参数。

2. 写入的数据 (`data`)：您需要提供要写入文件的数据。这可以是字符串、缓冲区（Buffer）或 Uint8Array。这是 `fs.writeFile()` 方法的第二个参数。

3. 编码选项（可选）：如果您传递字符串作为数据并且希望以特定编码写入文件，您可以指定编码选项，例如：
   - `'utf8'`：以 UTF-8 编码写入文本数据。
   - `'ascii'`：以 ASCII 编码写入数据。
   - `'binary'`：以二进制模式写入数据。

4. 回调函数：`fs.writeFile()` 是异步方法，因此它需要一个回调函数，用于在写入操作完成后执行。这个回调函数接受一个参数：
   - `err`：如果写入文件时发生错误，`err` 参数将包含错误信息，否则为 `null`。

下面是一个示例，展示如何使用 `fs.writeFile()` 并传入这些参数来写入文件：

```javascript
const fs = require('fs');

const filePath = 'example.txt'; // 文件路径
const dataToWrite = 'Hello, world!'; // 要写入的数据
const encoding = 'utf8'; // 编码选项

fs.writeFile(filePath, dataToWrite, encoding, (err) => {
    if (err) {
        console.error('写入文件时发生错误:', err);
    } else {
        console.log('文件写入成功');
    }
});
```

在这个示例中，我们指定了文件路径、要写入的数据、编码选项（UTF-8），并提供了一个回调函数，用于处理写入文件的结果。如果写入操作成功，回调函数将被调用，否则，它将包含一个描述错误的 `err` 参数。

## 检查文件和目录：

- `fs.access()` : 检查文件或目录是否存在。

最新版本的 Node.js 中，`fs.exists()` 方法已经被废弃（deprecated），不再建议使用。取而代之的是使用更加现代的方式来检查文件或目录是否存在。在代替方法中，您通常使用 `fs.access()` 或直接调用文件系统操作方法，并在错误处理中检查文件是否存在。

`fs.access()` 是 Node.js 文件系统模块中的方法，用于异步检查文件或目录的存在性和权限。它是一种现代的方式来检查文件系统中的文件或目录，更适合于 Node.js 异步事件驱动的编程模型。`fs.access()` 方法用于确保文件或目录的存在并验证对它们的访问权限。

以下是使用 `fs.access()` 方法的详细介绍：

### 基本用法：

```javascript
const fs = require('fs');

const path = 'example.txt';

// 检查文件是否存在
fs.access(path, fs.constants.F_OK, (err) => {
    if (err) {
        console.error('文件不存在');
    } else {
        console.log('文件存在');
    }
});
```

在这个示例中，我们使用 `fs.access()` 方法来检查文件是否存在。第一个参数是要检查的文件路径，第二个参数是一个标志，`fs.constants.F_OK` 表示检查文件是否存在。在回调函数中，我们根据是否出现错误来确定文件的存在性。

### 权限检查：

您可以使用不同的标志来检查文件或目录的不同权限。以下是一些常用的标志：

- `fs.constants.F_OK`：检查文件是否存在。
- `fs.constants.R_OK`：检查文件是否可读。
- `fs.constants.W_OK`：检查文件是否可写。
- `fs.constants.X_OK`：检查文件是否可执行。

您可以将这些标志组合在一起，以进行多个检查。例如，要检查文件是否存在并且可读，可以使用 `fs.constants.F_OK | fs.constants.R_OK`。

### 异常处理：

如果文件不存在或没有请求的权限，`fs.access()` 方法会在回调函数中传递一个错误对象。您可以根据错误对象的属性来判断出错的原因。

```javascript
fs.access(path, fs.constants.F_OK | fs.constants.R_OK, (err) => {
    if (err) {
        if (err.code === 'ENOENT') {
            console.error('文件不存在');
        } else if (err.code === 'EACCES') {
            console.error('无法访问文件');
        } else {
            console.error('发生其他错误:', err);
        }
    } else {
        console.log('文件存在并可读');
    }
});
```

在这个示例中，我们检查文件是否存在并且可读。根据不同的错误代码，我们可以确定出错的具体原因。

`fs.access()` 是一种强大的方法，可用于确保应用程序能够安全地访问文件或目录。它允许您进行精细的权限检查，并与异步编程模型相集成，确保不会阻塞事件循环。

- `fs.stat()`: 获取文件或目录的详细信息，如文件大小、创建时间等。

`fs.stat()` 是 Node.js 文件系统模块中的方法，用于获取文件或目录的详细信息。这个方法是异步的，通常用于检查文件的属性、大小、修改时间等。`fs.stat()` 方法需要传入以下参数：

1. 文件路径 (`path`)：您需要指定要获取信息的文件或目录的路径，可以是相对路径或绝对路径。这是 `fs.stat()` 方法的第一个参数。

2. 回调函数：`fs.stat()` 是异步方法，因此它需要一个回调函数，用于在获取文件或目录信息后执行。这个回调函数接受两个参数：
   - `err`：如果获取信息时发生错误，`err` 参数将包含错误信息，否则为 `null`。
   - `stats`：如果成功获取文件或目录信息，`stats` 参数将包含一个包含属性的对象，包括文件大小、创建时间、修改时间等。

下面是一个示例，展示如何使用 `fs.stat()` 并传入这些参数来获取文件的信息：

```javascript
const fs = require('fs');

const filePath = 'example.txt'; // 文件路径

fs.stat(filePath, (err, stats) => {
    if (err) {
        console.error('获取文件信息时发生错误:', err);
    } else {
        console.log('文件信息:');
        console.log('文件大小 (字节):', stats.size);
        console.log('创建时间:', stats.ctime);
        console.log('修改时间:', stats.mtime);
        console.log('是否是目录:', stats.isDirectory());
        console.log('是否是文件:', stats.isFile());
    }
});
```

在这个示例中，我们指定了文件路径，并提供了一个回调函数来处理获取的文件信息。如果成功获取文件信息，`stats` 参数将包含文件的各种属性，如文件大小、创建时间、修改时间等。您可以根据需要使用这些属性。如果获取信息时发生错误，`err` 参数将包含错误信息。

总之，`fs.stat()` 是一个有用的方法，用于检查文件或目录的属性和状态，以便在应用程序中执行相关操作。

## 创建和删除目录：

- `fs.mkdir()`: 创建一个新目录。

`fs.mkdir()` 是 Node.js 文件系统模块中的方法，用于异步地创建新目录。这个方法允许您在指定的路径下创建新目录，以便组织文件和数据。以下是使用 `fs.mkdir()` 方法的基本介绍：

`fs.mkdir()` 方法需要传入以下参数：

1. 目录路径 (`path`)：您需要指定要创建新目录的路径，可以是相对路径或绝对路径。这是 `fs.mkdir()` 方法的第一个参数。

2. 权限选项（可选）：您可以指定新目录的权限，通常以八进制数表示。例如，`0o755` 表示默认权限，允许所有人读和执行目录，但只允许所有者写入。如果不提供权限选项，将使用默认权限。

3. 回调函数：`fs.mkdir()` 是异步方法，因此它需要一个回调函数，用于在创建目录后执行。这个回调函数接受一个参数：
   - `err`：如果创建目录时发生错误，`err` 参数将包含错误信息，否则为 `null`。

下面是一个示例，展示如何使用 `fs.mkdir()` 并传入这些参数来创建新目录：

```javascript
const fs = require('fs');

const directoryPath = 'new-directory'; // 新目录路径

// 创建新目录
fs.mkdir(directoryPath, { recursive: true }, (err) => {
    if (err) {
        console.error('创建目录时发生错误:', err);
    } else {
        console.log('目录创建成功');
    }
});
```

在这个示例中，我们指定了目录路径，并提供了一个回调函数来处理目录的创建结果。为了确保目录的创建，我们使用了 `{ recursive: true }` 选项，这样如果目录的父目录不存在，也会一并创建。如果创建目录成功，回调函数将被调用，否则它将包含一个描述错误的 `err` 参数。

`fs.mkdir()` 是非常有用的，可以用于在应用程序中动态创建目录，以便存储文件、生成临时文件夹等。

- `fs.rmdir()`: 删除目录。
- `fs.readdir()`: 读取目录中的文件和子目录。

`fs.readdir()` 是 Node.js 文件系统模块中的方法，用于异步地读取指定目录中的文件和子目录的列表。这个方法非常有用，因为它允许您获取目录内容，以便进一步处理或操作这些文件和子目录。以下是使用 `fs.readdir()` 方法的基本介绍：

`fs.readdir()` 方法需要传入以下参数：

1. 目录路径 (`path`)：您需要指定要读取其内容的目录的路径，可以是相对路径或绝对路径。这是 `fs.readdir()` 方法的第一个参数。

2. 回调函数：`fs.readdir()` 是异步方法，因此它需要一个回调函数，用于在读取目录内容后执行。这个回调函数接受两个参数：
   - `err`：如果读取目录内容时发生错误，`err` 参数将包含错误信息，否则为 `null`。
   - `files`：如果成功读取目录内容，`files` 参数将包含一个包含目录中的文件和子目录名称的数组。

下面是一个示例，展示如何使用 `fs.readdir()` 并传入这些参数来读取目录的内容：

```javascript
const fs = require('fs');

const directoryPath = './my-directory'; // 目录路径

fs.readdir(directoryPath, (err, files) => {
    if (err) {
        console.error('读取目录内容时发生错误:', err);
    } else {
        console.log('目录内容:');
        files.forEach((file) => {
            console.log(file);
        });
    }
});
```

在这个示例中，我们指定了目录路径，并提供了一个回调函数来处理读取的目录内容。如果成功读取目录内容，`files` 参数将包含目录中的文件和子目录名称的数组。您可以在回调函数中迭代这个数组，以便进一步处理这些文件和子目录。

请注意，`fs.readdir()` 会返回目录中的所有项目，包括文件和子目录的名称。您可以进一步处理这些项目，执行各种操作，如读取文件内容、删除文件，或进一步操作子目录等。

## 重命名和移动文件：

- `fs.rename()`: 用于重命名文件或移动文件到不同的路径。

## 删除文件：

- `fs.unlink()`: 用于删除文件。

## 监听文件变化：

- `fs.watch()`: 用于监视文件和目录的变化。

`fs`模块支持异步和同步的操作，通常推荐使用异步操作，因为它们不会阻塞Node.js事件循环，从而提高了应用程序的性能和响应性。